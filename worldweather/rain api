import cdsapi
import os
import time
os.chdir("")

def retrieve_data(year):
    c = cdsapi.Client()
    file_name = f'{year}download.zip'

    c.retrieve(
        'insitu-observations-surface-land',
        {
            'format': 'zip',
            'variable': 'accumulated_precipitation',
            'data_quality': 'passed',
            'usage_restrictions': 'unrestricted',
            'year': str(year),
            'time_aggregation': 'daily',
            'month': ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'],
            'day': [
                '01', '02', '03',
                '04', '05', '06',
                '07', '08', '09',
                '10', '11', '12',
                '13', '14', '15',
                '16', '17', '18',
                '19', '20', '21',
                '22', '23', '24',
                '25', '26', '27',
                '28', '29', '30',
                '31',
            ],
        },
        file_name
    )

    # Check if the file is not empty
    if os.path.exists(file_name) and os.path.getsize(file_name) > 10:
        print(f"Successfully downloaded data for year {year}")
    else:
        print(f"Failed to download data for year {year}")

#Finds the last year which was downloaded
def get_last_year():
    try:
        with open("last_year_rain.txt", "r") as f:
            last_year = int(f.read())
    except FileNotFoundError:
        last_year = 1991  # Default starting year
    return last_year


# Function to update the last successfully downloaded year
def update_last_year(year):
    with open("last_year_rain.txt", "w") as f:
        f.write(str(year))


def main():
    last_year = get_last_year()
    current_year = 2024

    # Loop from the last successfully downloaded year to the current year
    for year in range(last_year, current_year + 1):
        retrieve_data(year)
        update_last_year(year)  # Update the last year after successful download
        time.sleep(10)  # Adding a delay to ensure the server has time to process the next request


if __name__ == "__main__":
    main()
